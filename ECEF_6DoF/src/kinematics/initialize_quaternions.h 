// This File is used to initialize the quaternions using euler angles and latitude and longitude. 

#ifndef INITIALIZE_QUATERNIONS_H
#define INITIALIZE_QUATERNIONS_H

#include <cmath>
#include "../common/variables.h"
#include "./quaternion.h" 

void quaternion_init(comvar* s_data)
{ 
	
	// Local Body to Local Level Quaternions 
	Quaternion q_x_body_2_ll (cos(s_data->roll/2), sin(s_data->roll/2), 0, 0); 
	Quaternion q_y_body_2_ll (cos(s_data->pitch/2), 0, sin(s_data->pitch/2), 0); 
	Quaternion q_z_body_2_ll (cos(s_data->yaw/2), 0, 0, sin(s_data->yaw/2)); 
	Quaternion q_body_2_ll_result; 
	
	// Local Level to ECEF
	Quaternion q_rot1_ll_2_ecef (cos(s_data->longitude/2), 0, 0, sin(s_data->longitude/2)); // Z Axis About Longitude 
	Quaternion q_rot2_ll_2_ecef (cos(s_data->latitude/2), 0, sin(s_data->latitude/2), 0); // Y Axis About Latitude 
	Quaternion q_ll_2_ecef_result; 
	
	// Construct Rotation Quaternion and Normalize it - Body Frame to ECEF
	// 3-2-1 Rotation Sequence 
	q_body_2_ll_result = q_z_body_2_ll.quat_mult(q_y_body_2_ll).quat_mult(q_x_body_2_ll); 
	s_data->q_body_2_ll = q_body_2_ll_result.normalize(); 
	
	// Construct Rotation Quaternion and Normalize it - Local Level to ECEF 
	// 3-2 Rotation Sequence 
	q_ll_2_ecef_result = q_rot1_ll_2_ecef.quat_mult(q_rot2_ll_2_ecef); 
	s_data->q_ll_2_ecef = q_ll_2_ecef_result.normalize(); 
}
	
#endif 
